// Generated by gencpp from file oled_display_node/DisplayOutput.msg
// DO NOT EDIT!


#ifndef OLED_DISPLAY_NODE_MESSAGE_DISPLAYOUTPUT_H
#define OLED_DISPLAY_NODE_MESSAGE_DISPLAYOUTPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace oled_display_node
{
template <class ContainerAllocator>
struct DisplayOutput_
{
  typedef DisplayOutput_<ContainerAllocator> Type;

  DisplayOutput_()
    : actionType(0)
    , row(0)
    , column(0)
    , numChars(0)
    , attributes(0)
    , text()
    , comment()  {
    }
  DisplayOutput_(const ContainerAllocator& _alloc)
    : actionType(0)
    , row(0)
    , column(0)
    , numChars(0)
    , attributes(0)
    , text(_alloc)
    , comment(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _actionType_type;
  _actionType_type actionType;

   typedef int32_t _row_type;
  _row_type row;

   typedef int32_t _column_type;
  _column_type column;

   typedef int32_t _numChars_type;
  _numChars_type numChars;

   typedef int32_t _attributes_type;
  _attributes_type attributes;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _comment_type;
  _comment_type comment;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DISPLAY_ALL)
  #undef DISPLAY_ALL
#endif
#if defined(_WIN32) && defined(DISPLAY_SUBSTRING)
  #undef DISPLAY_SUBSTRING
#endif
#if defined(_WIN32) && defined(DISPLAY_STARTUP_STRING)
  #undef DISPLAY_STARTUP_STRING
#endif
#if defined(_WIN32) && defined(DISPLAY_SET_BRIGHTNESS)
  #undef DISPLAY_SET_BRIGHTNESS
#endif

  enum {
    DISPLAY_ALL = 1u,
    DISPLAY_SUBSTRING = 2u,
    DISPLAY_STARTUP_STRING = 3u,
    DISPLAY_SET_BRIGHTNESS = 4u,
  };


  typedef boost::shared_ptr< ::oled_display_node::DisplayOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::oled_display_node::DisplayOutput_<ContainerAllocator> const> ConstPtr;

}; // struct DisplayOutput_

typedef ::oled_display_node::DisplayOutput_<std::allocator<void> > DisplayOutput;

typedef boost::shared_ptr< ::oled_display_node::DisplayOutput > DisplayOutputPtr;
typedef boost::shared_ptr< ::oled_display_node::DisplayOutput const> DisplayOutputConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::oled_display_node::DisplayOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::oled_display_node::DisplayOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::oled_display_node::DisplayOutput_<ContainerAllocator1> & lhs, const ::oled_display_node::DisplayOutput_<ContainerAllocator2> & rhs)
{
  return lhs.actionType == rhs.actionType &&
    lhs.row == rhs.row &&
    lhs.column == rhs.column &&
    lhs.numChars == rhs.numChars &&
    lhs.attributes == rhs.attributes &&
    lhs.text == rhs.text &&
    lhs.comment == rhs.comment;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::oled_display_node::DisplayOutput_<ContainerAllocator1> & lhs, const ::oled_display_node::DisplayOutput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace oled_display_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::oled_display_node::DisplayOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::oled_display_node::DisplayOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::oled_display_node::DisplayOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::oled_display_node::DisplayOutput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oled_display_node::DisplayOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::oled_display_node::DisplayOutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::oled_display_node::DisplayOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "567ef47aeacf47c506f682fecb519829";
  }

  static const char* value(const ::oled_display_node::DisplayOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x567ef47aeacf47c5ULL;
  static const uint64_t static_value2 = 0x06f682fecb519829ULL;
};

template<class ContainerAllocator>
struct DataType< ::oled_display_node::DisplayOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "oled_display_node/DisplayOutput";
  }

  static const char* value(const ::oled_display_node::DisplayOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::oled_display_node::DisplayOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request to place text on the display.\n"
"# The display row and column as well as string specifics are required\n"
"# A comment field is used to assist user debug\n"
"\n"
"# actionType values\n"
"uint8  DISPLAY_ALL=1              # Message to fill entire display\n"
"uint8  DISPLAY_SUBSTRING=2        # Message for a set of characters on one line\n"
"uint8  DISPLAY_STARTUP_STRING= 3  # Reserved for future use for non-volatile startup string\n"
"uint8  DISPLAY_SET_BRIGHTNESS= 4  # Sets display brightness. attributes is the brightness\n"
"\n"
"int32  actionType                 # The type of action to be taken. See MSG_DISPLAY for values\n"
"int32  row                        # The display row of characters for this message\n"
"                                  # row can be from 0 to 7 where 0 is top line\n"
"int32  column                     # The starting horizontal pixel column\n"
"                                  # The column can be 0 - 118 where 0 is start at the left\n"
"int32  numChars                   # Number of characters to go to the display\n"
"int32  attributes                 # Used for brightness level \n"
"string text                       # The text for this display update.  Up to 15 characters\n"
"string comment                    # Optional comment the user can use to document purpose\n"
;
  }

  static const char* value(const ::oled_display_node::DisplayOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::oled_display_node::DisplayOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actionType);
      stream.next(m.row);
      stream.next(m.column);
      stream.next(m.numChars);
      stream.next(m.attributes);
      stream.next(m.text);
      stream.next(m.comment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DisplayOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::oled_display_node::DisplayOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::oled_display_node::DisplayOutput_<ContainerAllocator>& v)
  {
    s << indent << "actionType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.actionType);
    s << indent << "row: ";
    Printer<int32_t>::stream(s, indent + "  ", v.row);
    s << indent << "column: ";
    Printer<int32_t>::stream(s, indent + "  ", v.column);
    s << indent << "numChars: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numChars);
    s << indent << "attributes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.attributes);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
    s << indent << "comment: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.comment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OLED_DISPLAY_NODE_MESSAGE_DISPLAYOUTPUT_H
