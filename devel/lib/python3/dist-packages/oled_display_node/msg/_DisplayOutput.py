# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from oled_display_node/DisplayOutput.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DisplayOutput(genpy.Message):
  _md5sum = "567ef47aeacf47c506f682fecb519829"
  _type = "oled_display_node/DisplayOutput"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Request to place text on the display.
# The display row and column as well as string specifics are required
# A comment field is used to assist user debug

# actionType values
uint8  DISPLAY_ALL=1              # Message to fill entire display
uint8  DISPLAY_SUBSTRING=2        # Message for a set of characters on one line
uint8  DISPLAY_STARTUP_STRING= 3  # Reserved for future use for non-volatile startup string
uint8  DISPLAY_SET_BRIGHTNESS= 4  # Sets display brightness. attributes is the brightness

int32  actionType                 # The type of action to be taken. See MSG_DISPLAY for values
int32  row                        # The display row of characters for this message
                                  # row can be from 0 to 7 where 0 is top line
int32  column                     # The starting horizontal pixel column
                                  # The column can be 0 - 118 where 0 is start at the left
int32  numChars                   # Number of characters to go to the display
int32  attributes                 # Used for brightness level 
string text                       # The text for this display update.  Up to 15 characters
string comment                    # Optional comment the user can use to document purpose
"""
  # Pseudo-constants
  DISPLAY_ALL = 1
  DISPLAY_SUBSTRING = 2
  DISPLAY_STARTUP_STRING = 3
  DISPLAY_SET_BRIGHTNESS = 4

  __slots__ = ['actionType','row','column','numChars','attributes','text','comment']
  _slot_types = ['int32','int32','int32','int32','int32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       actionType,row,column,numChars,attributes,text,comment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DisplayOutput, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.actionType is None:
        self.actionType = 0
      if self.row is None:
        self.row = 0
      if self.column is None:
        self.column = 0
      if self.numChars is None:
        self.numChars = 0
      if self.attributes is None:
        self.attributes = 0
      if self.text is None:
        self.text = ''
      if self.comment is None:
        self.comment = ''
    else:
      self.actionType = 0
      self.row = 0
      self.column = 0
      self.numChars = 0
      self.attributes = 0
      self.text = ''
      self.comment = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5i().pack(_x.actionType, _x.row, _x.column, _x.numChars, _x.attributes))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.comment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.actionType, _x.row, _x.column, _x.numChars, _x.attributes,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comment = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5i().pack(_x.actionType, _x.row, _x.column, _x.numChars, _x.attributes))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.comment
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.actionType, _x.row, _x.column, _x.numChars, _x.attributes,) = _get_struct_5i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.comment = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.comment = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
